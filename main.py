#! /usr/bin/python3
# -*- coding: utf-8 -*-

import vk_api.longpoll
import time
import json
from group_digits import group_digits

token = "***"

vk_session = vk_api.VkApi(token=token)
longpoll = vk_api.longpoll.VkLongPoll(vk_session)

with open("all_tasks.json") as f:
    all_tasks = json.load(f)

def write_in_file(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=2)

def response(event, text): 
    """
    –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑–æ–π –¥–ª—è —ç—Å—Ç–µ—Ç–∏—á–Ω–æ—Å—Ç–∏
    
    """
    
    time.sleep(0.7)
    vk_session.method("messages.markAsRead", {"peer_id": event.user_id , "v": 5.103})
    time.sleep(0.7)
    vk_session.method("messages.send", {'user_id': event.user_id, 'message': text, 'random_id': 0})

def analize_message(event, all_tasks):
    """
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ä–º–∞—Ç—É –∏ —Å–æ–æ–±—â–∞–µ—Ç, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (0, 0)
    –≤ —Å–ª—É—á–∞–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ - –Ω–æ–º–µ—Ä —Å–µ–º–∏–Ω–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    
    """
    
    if len(event.text.split()) == 2:
        words = event.text.split()
    else:
        response(event, "–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.\nüöÄ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–æ–º–µ—Ä —Å–µ–º–∏–Ω–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 5' –≤—ã–¥–∞—Å—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—è—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞)")
        return (0, 0)
    try:
        int(words[0])
        int(words[1])
        if int(words[0]) > 12 or int(words[0]) < 1:
            response(event, "C–µ–º–∏–Ω–∞—Ä–∞ " + str(words[0]) + " –ø–æ–∫–∞ –Ω–µ—Ç")
            return (0, 0)
        if int(words[1]) > all_tasks['length'][words[0]] or int(words[1]) < 1:
            response(event,  "–í —Å–µ–º–∏–Ω–∞—Ä–µ " + str(words[0]) + " –Ω–µ—Ç –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º " + str(words[1]) + "!")
            return (0, 0)
        return (words[0], words[1])
    except:
        response(event, "–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.\nüöÄ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–æ–º–µ—Ä —Å–µ–º–∏–Ω–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 5' –≤—ã–¥–∞—Å—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—è—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞)")
    return (0, 0)

def remember_users(user_id):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ—Ç.
    –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –≥—Ä–∞–º–æ—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑.
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∏ 1, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ.
    
    """
    
    with open('user_id', "r") as f:
        if str(user_id) not in f.read():
            x = 1
        else:
            x = 0
    if x == 1:
        with open('user_id', "a+") as file:
                file.write(str(user_id))
                file.write('\n')
                return 0
    else:
        return 1

def analize_request(event, seminar, task, all_tasks):
    """
    –ø–æ —Å—É—Ç–∏ —Å–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É.
    —Å–Ω—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, –¥–∞–ª–µ–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—à–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
    –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    –¥–∞–ª–µ–µ 2 –ø—É—Ç–∏:
    1. –µ—Å–ª–∏ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–æ —Å–æ–∑–¥–∞—Ç–µ—Å—è –∫–ª—é—á –∑–∞–¥–∞—á–∏ –≤ –Ω—É–∂–Ω–æ–º —Å–µ–º–∏–Ω–∞—Ä–µ, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–æ–π —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É–∂–∞—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    –∫ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    2. –µ—Å–ª–∏ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–∏–ª –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–æ –≤ —Ü–∏–∫–ª–µ –∫–∞–∂–¥–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏, –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ñ–æ—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è.
    –∫–æ–≥–¥–∞ —Ö–æ—Ç—è –±—ã 1 –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –¥–æ–±–∞–≤–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–µ–Ω–∞ –≤ all_tasks.json - —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∏–∂–µ
    
    """
    
    if seminar == 0:
        return 0
    else:
        if "attach1" in event.attachments.keys():
            for i in range(1, int(len(str(event.attachments.keys()).split())/2) + 1):
                if event.attachments['attach' + str(i) + "_type"] != "photo":
                    response(event, "–†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ")
                    return 0
            r = vk_session.method("messages.getById", {"message_ids": event.message_id})
            access_key = []
            if task in all_tasks[seminar].keys() and "0" in all_tasks[seminar][task].keys() and "photo" in all_tasks[seminar][task]['0']:
                response(event, "–ó–∞–¥–∞—á–∞ " + str(task) + " –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ " + str(seminar) + " —É–∂–µ —Ä–µ—à–µ–Ω–∞")
                response(event, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ @saturnnm (–ú–Ω–µ) –≤ –ª—Å")
                return 0
            else:
                all_tasks[seminar][task] = {}
            for i in range(0, int(len(str(event.attachments.keys()).split())/2)):
                access_key.append(r['items'][0]['attachments'][i]['photo']['access_key'])
                string = "photo" + str(event.attachments["attach" + str(i+1)]) + "_" + str(access_key[i])
                all_tasks[seminar][task][str(i)] = string
            with open("moderators_ids", "r") as f:
                moderators = f.read()
                if str(event.user_id) in moderators:
                    write_in_file(all_tasks, "all_tasks.json")
                else:
                    attach = str(all_tasks[seminar][task]['0'])
                    for i in range(1, all_tasks[seminar][task].keys().__len__()):
                        attach += "," + str(all_tasks[seminar][task][str(i)])
                    for j in moderators.split('\n'):
                        vk_session.method("messages.send", {'user_id': int(j),
                                                            'message':  seminar + " " + task,
                                                            'random_id': 0,
                                                            'attachment': attach})
                    delete_image(event.text, all_tasks)
            user = vk_session.method("users.get", {"user_ids": event.user_id})
            response(event,  user[0]['first_name'] + ", —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ " + str(task) + " –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ " + str(seminar) + "!")
        else:
            if task in all_tasks[seminar].keys() and '0' in all_tasks[seminar][task].keys() and "photo" in all_tasks[seminar][task]['0']:
                attach = str(all_tasks[seminar][task]['0'])
                for i in range(1, all_tasks[seminar][task].keys().__len__()):
                    attach += "," + str(all_tasks[seminar][task][str(i)])
                vk_session.method("messages.send", {'user_id': event.user_id,
                                                    'message': "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ " + task + " –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ "+ seminar + ":",
                                                    'random_id': 0,
                                                    'attachment': attach})

            else:
                response(event, "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ üê®")
            return 0

def ask_help(event):
    """
    –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π "—Ö–µ–ª–ø"
    
    """
    
    response(event, "–ü–æ–¥—Å–∫–∞–∑–∞–∫–∞:\n\n" + "‚ö° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–æ–º–µ—Ä —Å–µ–º–∏–Ω–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 5' –≤—ã–≤–µ–¥–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—è—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞)\n\n"
        + "‚ö° –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –Ω–æ–º–µ—Ä–æ–º —Å–µ–º–∏–Ω–∞—Ä–∞ –∏ –∑–∞–¥–∞—á–∏.\n\n"
        + "‚ùó –ö–æ–º–∞–Ω–¥–∞ '–≤—Å–µ' –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        + "‚ö° –í—ã–∑–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—â–µ —Ä–∞–∑ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π '—Ö–µ–ª–ø'.\n\n"
        + "–ü–æ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @saturnnm (–ú–Ω–µ) üòâ")

def delete_image(text, all_tasks):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ "<—Å–µ–º–∏–Ω–∞—Ä> <–∑–∞–¥–∞—á–∞> delete23012001"
    —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –∞ —Ç–∞–∫–∂–µ –∫–ª—é—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–¥–∞—á–µ
    
    """
    
    words = text.split()
    if words[1] in all_tasks[words[0]].keys():
        for i in list(all_tasks[words[0]][words[1]].keys()):
            del all_tasks[words[0]][words[1]][i]
        del all_tasks[words[0]][words[1]]
        write_in_file(all_tasks, "all_tasks.json")
    return all_tasks

def print_all_tasks(all_tasks, event):
    """
    –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —á–∏—Å–µ–ª –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å —ç–∫—Ä–∞–Ω
    
    """
    
    string = ""
    for seminar in all_tasks.keys():
        if seminar != "length":
            string += str(seminar) + ": "
            tasks_array = []
            for task in (all_tasks[seminar].keys()):
                tasks_array.append(int(task))
            tasks_array = sorted(tasks_array)
            string = string + ', '.join(group_digits(tasks_array)) + "\n"
    response(event, string)

def accept_photo(event):
    """
    —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ –∂–∏–∑–Ω–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç reply —Å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, —Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è –≤ all_tasks.json
    –µ—Å–ª–∏ reply –ø–æ–ª—É—á–µ–Ω –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –µ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–≥–¥–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.
    
    """
    
    with open("moderators_ids", "r") as f:
        if str(event.user_id) in f.read():
            r = vk_session.method("messages.getById", {"message_ids": event.message_id})
            words = r['items'][0]['reply_message']['text'].split()
            if words[1] in all_tasks[words[0]]:
                vk_session.method("messages.send", {'user_id': event.user_id,
                                                    'message': "–°–ø–∞—Å–∏–±–æ, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                                    'random_id': 0})
            else:
                boarder = len(r['items'][0]['reply_message']['attachments'])
                attach = []
                if words[1] not in all_tasks[words[0]].keys():
                    all_tasks[words[0]][words[1]] = {}
                    for i in range(0, boarder):
                        attach.append("photo" + str(r['items'][0]['reply_message']['attachments'][i]['photo']['owner_id']) + "_" + str(r['items'][0]['reply_message']['attachments'][i]['photo']['id']) + "_" + str(r['items'][0]['reply_message']['attachments'][i]['photo']['access_key']))
                        all_tasks[words[0]][words[1]][str(i)] = attach[i]
                    write_in_file(all_tasks, "all_tasks.json")
                    response(event, "–î–æ–±–∞–≤–ª–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
         else:
            response(event, "–í–≤–µ–¥–∏—Ç–µ '—Ö–µ–ª–ø', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É.")
    
def main(all_tasks):
    """
    –≤ main –∏–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω –º–µ—Ç–æ–¥ longpoll.listen(), –∫–æ—Ç–æ—Ä—ã–π "–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –±–æ—Ç—É.
    –∫–∞–∂–¥–∞—è —Å—Ç–ø—É–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—è—Ç –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try ... except –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
    –≤–æ-–ø–µ—Ä–≤—ã—Ö, –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º longpoll.listen(). –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∏ –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏—à–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç, —Ç–æ –æ–Ω –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É.
    –≤–æ-–≤—Ç–æ—Ä—ã—Ö, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–ª–æ–º–∫—É –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ—Ç –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–µ—á–∞–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–æ—Ç–æ–º –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ
    
    """
    
    x = 1
    try:
        while x == 1:
            for event in longpoll.listen():
                if event.type == vk_api.longpoll.VkEventType.MESSAGE_NEW:
                    if not event.from_me:
                        c = remember_users(event.user_id)
                        if event.text == "—Ö–µ–ª–ø" or c == 0:
                            if c == 0:
                                user = vk_session.method("users.get", {"user_ids": event.user_id})
                                response(event, "–ü—Ä–∏–≤–µ—Ç, " + user[0]['first_name'] + "!")
                            ask_help(event)
                        elif event.text == "error":
                            print(lol)
                        elif event.text == "stop23012001":
                            x = 0
                            break
                        elif "reply" in event.attachments.keys():
                            accept_photo(event)
                        elif "delete23012001" in event.text:
                            all_tasks = delete_image(event.text, all_tasks)
                        elif event.text.lower() == "–≤—Å–µ":
                            print_all_tasks(all_tasks, event)
                        elif event.text.lower() == "—Å–ø–∞—Å–∏–±–æ":
                            response(event, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞)")
                        else:
                            seminar, task = analize_message(event, all_tasks)
                            analize_request(event, seminar, task, all_tasks)
    except Exception as e:
        print("Error occured.")
        print(e)
        main(all_tasks)

if __name__ == "__main__":
    main(all_tasks)
